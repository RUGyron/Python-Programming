# -*- coding: utf-8 -*-
import config
import telebot
import requests
import random
import time
from telebot import types
from bs4 import BeautifulSoup
from pprint import pprint as pp


bot = telebot.TeleBot(config.token)
'''
@bot.message_handler(content_types=['text'])
def echo(message):
    print(message)
    return None
'''
headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/61.0.3163.100 YaBrowser/17.10.1.1204 Yowser/2.5 Safari/537.36'}
@bot.message_handler(commands=['start'])
def startBot(message):
    key = types.ReplyKeyboardMarkup()
    key.row('–ü–æ–∏—Å–∫', '–°–æ–≤–µ—Ç')
    bot.send_message(message.chat.id, '–ù–∞—á–Ω—ë–º, ' + message.chat.first_name + '?üòä', reply_markup=key)


Genre = '0'
YearSt = '0'
YearEn = '0'
Contry = '0'
cnt = 0
@bot.message_handler(content_types=['text'])
def inline(message):
    global cnt
    if message.text == '–°–æ–≤–µ—Ç':
        if cnt == 0:
            recommendFilm(message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if message.text == '–ö –Ω–∞—á–∞–ª—É':
        if cnt == 0:
            startBot(message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if message.text == '–ü–æ–∏—Å–∫':
        cnt = 1
        searchFilm(message)
    if '-' in message.text:
        if cnt == 0:
            getScheduleSearch(getFilmBySearch(message))
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if message.text == '–°–ª—É—á–∞–π–Ω—ã–π':
        if cnt == 0:
            getScheduleRandom(getFilmRandom(), message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if message.text == '–ò–∑ —Ç–æ–ø–∞':
        if cnt == 0:
            getFilmTop(message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if message.text == '–§–∏–ª—å—Ç—Ä—ã':
        if cnt == 0:
            getFilters(message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if 'G:' in message.text:
        if cnt == 0:
            getGenre(message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if '_' in message.text:
        if cnt == 0:
            if Genre == '0':
                bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ üòÖ')
            getYear(message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')
    if 'C:' in message.text:
        if cnt == 0:
            if Genre == '0' or YearEn == '0' or YearSt == '0':
                bot.send_message(message.chat.id, '–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∂–∞–Ω—Ä –∏–ª–∏ –≥–æ–¥, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ üòÖ')
            getContry(message)
        else:
            bot.send_message(message.chat.id, '–°–æ—Ä–∏, —Å–µ–π—á–∞—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å')



def getFilters(message):
    global cnt
    cnt = 1
    key = types.ReplyKeyboardMarkup()
    key.row('G:–ö—Ä–∏–º–∏–Ω–∞–ª', 'G:–§–µ–Ω—Ç–µ–∑–∏', 'G:–î–µ—Ç–µ–∫—Ç–∏–≤')
    key.row('G:–¢—Ä–∏–ª–ª–µ—Ä', 'G:–ú—É–ª—å—Ç—Ñ–∏–ª—å–º', 'G:–ë–æ–µ–≤–∏–∫')
    key.row('G:–ö–æ–º–µ–¥–∏—è', 'G:–£–∂–∞—Å—ã', 'G:–î—Ä–∞–º–∞')
    key.row('–ö –Ω–∞—á–∞–ª—É')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä', reply_markup=key)
    cnt = 0



def getGenre(message):
    global cnt
    global Genre
    cnt = 1
    Genre = message.text
    key = types.ReplyKeyboardMarkup()
    key.row('–ö –Ω–∞—á–∞–ª—É')
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–µ–º–µ–Ω–Ω–æ–π –ø–µ—Ä–∏–æ–¥ —á–µ—Ä–µ–∑ <b>–ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ</b>, '
                                      '–Ω–∞–ø—Ä–∏–º–µ—Ä\n<b>1995_2005</b>',parse_mode='HTML', reply_markup=key)
    cnt = 0


def getYear(message):
    global YearSt
    global YearEn
    global cnt
    cnt = 1
    try:
        YearSt, YearEn = message.text.split('_')
        key = types.ReplyKeyboardMarkup()
        key.row('C:–§—Ä–∞–Ω—Ü–∏—è', 'C:–ò—Å–ø–∞–Ω–∏—è', 'C:–ò—Ç–∞–ª–∏—è')
        key.row('C:–ò–Ω–¥–∏—è', 'C:–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è', 'C:–°–°–°–†')
        key.row('C:–Ø–ø–æ–Ω–∏—è', 'C:–°–®–ê', 'C:–†–æ—Å—Å–∏—è')
        key.row('–ö –Ω–∞—á–∞–ª—É')
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É', reply_markup=key)
    except:
        YearSt, YearEn = '0', '0'
        bot.send_message(message.chat.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Å–Ω–æ–≤–∞')
        getGenre(message)
    cnt = 0


def getContry(message):
    global Contry
    global cnt
    cnt = 1
    Contry = message.text
    getScheduleFilters(getFilmsFilters(message), message)
    cnt = 0


def getFilmsFilters(message):
    global Genre, YearSt, YearEn, Contry
    global cnt
    cnt = 1
    _, genre = Genre.split(':')
    _, contry = Contry.split(':')

    if contry == '–°–®–ê':
        contry = '1'
    elif contry == '–§—Ä–∞–Ω—Ü–∏—è':
        contry = '8'
    elif contry == '–†–æ—Å—Å–∏—è':
        contry = '2'
    elif contry == '–°–°–°–†':
        contry = '13'
    elif contry == '–ò—Å–ø–∞–Ω–∏—è':
        contry = '15'
    elif contry == '–ò—Ç–∞–ª–∏—è':
        contry = '14'
    elif contry == '–ò–Ω–¥–∏—è':
        contry = '29'
    elif contry == '–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è':
        contry = '11'
    elif contry == '–Ø–ø–æ–Ω–∏—è':
        contry = '9'

    if genre == '–ö—Ä–∏–º–∏–Ω–∞–ª':
        genre = '16'
    elif genre == '–§–µ–Ω—Ç–µ–∑–∏':
        genre = '5'
    elif genre == '–î–µ—Ç–µ–∫—Ç–∏–≤':
        genre = '17'
    elif genre == '–¢—Ä–∏–ª–ª–µ—Ä':
        genre = '4'
    elif genre == '–ú—É–ª—å—Ç—Ñ–∏–ª—å–º':
        genre = '14'
    elif genre == '–ë–æ–µ–≤–∏–∫':
        genre = '3'
    elif genre == '–ö–æ–º–µ–¥–∏—è':
        genre = '6'
    elif genre == '–£–∂–∞—Å—ã':
        genre = '1'
    elif genre == '–î—Ä–∞–º–∞':
        genre = '8'

    url = config.domainNav.format(genre, contry, YearSt, YearEn)
    print(url)
    try:
        web_page = requests.get(url).text
        web_page = BeautifulSoup(web_page, 'html5lib')
    except:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞')
    cnt = 0
    return web_page


def getScheduleFilters(Web_page, message):
    global cnt
    cnt = 1
    try:
        web_page = Web_page
        table = web_page.find('div', attrs={'id':'itemList'}).find_all('div', attrs={'class':'item _NO_HIGHLIGHT_'})
        num = random.randint(0, 99)
        text_info = table[num].find('div', attrs={'class':'info'})
        title = text_info.find('div', attrs={'class': 'name'}).find('a').get_text()
        others = text_info.find('div', attrs={'class': 'name'}).find('span').get_text()
        try:
            alter_name, _ = others.split(' (')
        except:
            alter_name = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
        year, _ = others.split(')')
        _, year = year.split('(')
        _, time = others.split(') ')
        others = text_info.find('span', attrs={'class': 'gray_text'}).get_text().replace('\n', '')
        contry, _ = others.split('—Ä–µ–∂.')
        contry = contry.replace(' ', '')
        if ',' in contry:
            contry = contry.replace(',', '')

        producer, _ = others.split('(')
        _, producer = producer.split('—Ä–µ–∂. ')
        producer = producer.replace('  ', '')
        genres, _ = others.split(')')
        _, genres = genres.split('(')
        url = config.defaultURL + text_info.find('div', attrs={'class': 'name'}).find('a').get('href')
        _, id = table[num].find('img').get('src').split('sm_film/')
        id, _ = id.split('.')
        img_url = 'https://st.kp.yandex.net/images/film_iphone/iphone360_{0}.jpg'.format(id)
        url_yt = 'https://www.youtube.com/results?search_query='
        title_yt = title.replace(' ', '+')
        url_yt += title_yt + '+—Ç—Ä–µ–π–ª–µ—Ä'
        hdrezka = config.hdrezkaURL + title.replace(' ', '_')

        film_text = '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ:üòÅ</b>\n\n'
        film_text += '<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>' + title + '\n<b>–ñ–∞–Ω—Ä: </b>' + genres + '\n<b>–°—Ç—Ä–∞–Ω–∞: </b>' + contry + \
                 '\n<b>–ì–æ–¥: </b>' + year + '\n<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>' + time + '\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ (–æ—Ä–∏–≥.): </b>' + alter_name + \
                 '\n<b>–†–µ–∂–∏—Å—Å—ë—Ä: </b>' + producer + '\n<b>–ò–Ω—Ñ–æ –Ω–∞ "–ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ": </b>' + url + '\n<b>–¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: </b>' + \
                 url_yt + '\n<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ www.hdrezka.ru: </b>' + hdrezka + '\n'

        bot.send_photo(message.chat.id, img_url)
        bot.send_message(message.chat.id, film_text, parse_mode='HTML')
    except:
        bot.send_message(message.chat.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞')
    cnt = 0


def getFilmTop(message):
    global cnt
    cnt = 1
    url = config.domainTop
    web_page = requests.get(url).text
    web_page = BeautifulSoup(web_page, 'html5lib')
    table = web_page.find('table', attrs={'id':'itemList'}).find_all('tr')
    num = random.randint(0,99)
    film_info = table[num]
    title = film_info.find('a', attrs={'class':'all'}).get_text()
    others = film_info.find('span', attrs={'style':'color: #888; font-family: arial; font-size: 11px;'
                                                       ' display: block'}).get_text()
    try:
        alter_name, _ = others.split(' (')
    except:
        alter_name = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
    year, _ = others.split(')')
    _, year = year.split('(')
    _, time = others.split(') ')
    others = film_info.find('span', attrs={'class', 'gray_text'}).get_text().replace('\n', '')
    contry, _ = others.split('—Ä–µ–∂.')
    contry = contry.replace(' ', '')
    if ',' in contry:
        contry = contry.replace(',', '')

    producer, _ = others.split('(')
    _, producer = producer.split('—Ä–µ–∂. ')
    producer = producer.replace('  ', '')
    genres, _ = others.split(')')
    _, genres = genres.split('(')
    url = config.defaultURL + film_info.find('a', attrs={'class':'all'}).get('href')
    _, id = film_info.find('img').get('title').split('sm_film/')
    id, _ = id.split('.')
    img_url = 'https://st.kp.yandex.net/images/film_iphone/iphone360_{0}.jpg'.format(id)
    url_yt = 'https://www.youtube.com/results?search_query='
    title_yt = title.replace(' ', '+')
    url_yt += title_yt + '+—Ç—Ä–µ–π–ª–µ—Ä'
    hdrezka = config.hdrezkaURL + title.replace(' ', '_')

    film_text = '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µ:üòÅ</b>\n\n'
    film_text += '<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>' + title + '\n<b>–ñ–∞–Ω—Ä: </b>' + genres + '\n<b>–°—Ç—Ä–∞–Ω–∞: </b>' + contry + \
                 '\n<b>–ì–æ–¥: </b>' + year + '\n<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>' + time + '\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ (–æ—Ä–∏–≥.): </b>' + alter_name + \
                 '\n<b>–†–µ–∂–∏—Å—Å—ë—Ä: </b>' + producer + '\n<b>–ò–Ω—Ñ–æ –Ω–∞ "–ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ": </b>' + url + '\n<b>–¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: </b>' + \
                 url_yt + '\n<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ www.hdrezka.ru: </b>' + hdrezka + '\n'

    bot.send_photo(message.chat.id, img_url)
    bot.send_message(message.chat.id, film_text, parse_mode='HTML')
    cnt = 0


def getScheduleRandom(Web_page, message):
    global cnt
    cnt = 1
    # key = types.ReplyKeyboardMarkup()
    # key.row('–ü–æ –Ω–æ–≤–æ–π "–†–∞–Ω–¥–æ–º"')
    # key.row('–ö –Ω–∞—á–∞–ª—É')

    web_page, url = Web_page

    all_info = web_page.find("div", attrs={"class": "b-object-summary"})

    title = all_info.find('div', attrs={'class': 'b-object-header'}).find('h1').get_text().split()[1:]
    titleNew = ''
    for i in title:
        titleNew += i + ' '

    try:
        alter_title = all_info.find('div', attrs={'class': 'b-object-header'}).find('h2').get_text().split()
        alter_titleNew = ''
        for i in alter_title:
            alter_titleNew += i + ' '
    except:
        alter_titleNew = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'

    genresN = ''
    genres = all_info.find('div', attrs={'class': 'b-tags'}).get_text().split()
    for i in genres:
        genresN += i + ' '

    producer = all_info.find('div', attrs={'class': 'm-margin-btm'}).find('span').get_text()

    others= all_info.find('span', attrs={'class': 'creation'}).get_text()[:-1].split(', ')
    contry = others[0]
    time = others[-1]
    year = others[-2]


    url_yt = 'https://www.youtube.com/results?search_query='
    title_yt = titleNew.replace(' ', '+')
    url_yt += title_yt + '—Ç—Ä–µ–π–ª–µ—Ä'
    hdrezka = config.hdrezkaURL + titleNew.replace(' ', '_')

    film_text = '<b>–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–ºüòÅ: </b>\n\n'
    film_text += '<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>' + titleNew + '\n<b>–ñ–∞–Ω—Ä: </b>' + genresN + '\n<b>–°—Ç—Ä–∞–Ω–∞: </b>' + contry + \
                 '\n<b>–ì–æ–¥: </b>' + year + '\n<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>' + time + '\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ (–æ—Ä–∏–≥.): </b>' + alter_titleNew + \
                 '\n<b>–†–µ–∂–∏—Å—Å—ë—Ä: </b>' + producer + '\n<b>–ò–Ω—Ñ–æ –Ω–∞ "–ê—Ñ–∏—à–µ": </b>' + url + '\n<b>–¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: </b>' + \
                 url_yt + '\n<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ www.hdrezka.ru: </b>' + hdrezka + '\n'
    web_photo = url + '/photo'
    web_photo = requests.get(web_photo).text
    web_photo = BeautifulSoup(web_photo, 'html5lib')
    try:
        img = web_photo.find('div', attrs={'class':'wrimg selected'}).find('img', attrs={'class':'photo'}).get('src')
        img = img.replace('100x100', '300x300')
        if img is None:
            img = 'http://gpsnew.ru/images/products/no_picture.jpg'
    except:
        img = 'http://gpsnew.ru/images/products/no_picture.jpg'
        print(img)
    bot.send_photo(message.chat.id, img)
    bot.send_message(message.chat.id, film_text, parse_mode='HTML')
    cnt = 0


def getFilmRandom():
    global cnt
    cnt = 1
    url = config.domainRandom + '20'
    randState = str(random.randrange(1000, 10000))
    url += randState
    print(url)
    web_page = requests.get(url).text
    web_page = BeautifulSoup(web_page, 'html5lib')
    ToDpage = web_page.get_text()
    ToD = True
    if '–£–≤—ã, —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–∞,' in ToDpage:
        ToD = False
    while not ToD:
        time.sleep(0.5)
        url = config.domainRandom + '20'
        randState = str(random.randrange(1000, 10000))
        url += randState
        print(url)
        web_page = requests.get(url).text
        web_page = BeautifulSoup(web_page, 'html5lib')
        ToDpage = web_page.get_text()
        ToD = True
        if '–£–≤—ã, —Ç–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ —Å—Å—ã–ª–∫–∞,' in ToDpage:
            ToD = False
    cnt = 0
    return web_page, url


def getFilmBySearch(message):
    global cnt
    cnt = 1
    nameFilm = message.text[1:]
    response = config.domainSearch + nameFilm
    query = requests.get(response).text
    cnt = 0
    return query, message


def getScheduleSearch(web_page):
    global cnt
    cnt = 1
    try:
        #–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ...
        web_page, message = web_page
        web = BeautifulSoup(web_page, "html5lib")

        all_info = web.find("div", attrs={"class": "element most_wanted"}).find('div', attrs={'class': 'info'})

        spec_url = all_info.find("a", attrs={"class": "js-serp-metrika"}).get('href')
        url = 'https://www.kinopoisk.ru'
        url += spec_url

        title = all_info.find("a", attrs={"class": "js-serp-metrika"}).get_text()
        year = all_info.find("span", attrs={'class':'year'}).get_text()
        grey_info = all_info.find_all('span', attrs={'class':'gray'})[:-1]
        try:
            alter_name, time = grey_info[0].get_text().split(', ')
        except:
            alter_name, time = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', grey_info[0].get_text()
        try:
            contry , _ = grey_info[1].get_text().split(', —Ä–µ–∂')
        except:
            contry, _ = grey_info[1].get_text().split(' —Ä–µ–∂')
        try:
            producer = grey_info[1].find('a', attrs={'data-type': 'film'}).get_text()
        except:
            producer = grey_info[1].find('a', attrs={'data-type': 'series'}).get_text()
        _, genres = grey_info[1].get_text().split('(')
        genres, _ = genres.split(')')
        id = web.find("div", attrs={"class": "element most_"
                                                   "wanted"}).find('p', attrs={'class': 'pic'}).find('img').get('title')
        _, id = id.split('sm_film/')
        id, _ = id.split('.')
        img_url = 'https://st.kp.yandex.net/images/film_iphone/iphone360_{0}.jpg'.format(id)
        url_yt = 'https://www.youtube.com/results?search_query='
        title_yt = title.replace(' ', '+')
        url_yt += title_yt + '+—Ç—Ä–µ–π–ª–µ—Ä'
        hdrezka = config.hdrezkaURL + title.replace(' ', '_')

        film_text = '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å–º–µüòÅ:</b>\n\n'
        film_text += '<b>–ù–∞–∑–≤–∞–Ω–∏–µ: </b>'+title+'\n<b>–ñ–∞–Ω—Ä: </b>'+genres+'\n<b>–°—Ç—Ä–∞–Ω–∞: </b>'+contry+\
                    '\n<b>–ì–æ–¥: </b>'+year+'\n<b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: </b>'+time+'\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ (–æ—Ä–∏–≥.): </b>'+alter_name+\
                    '\n<b>–†–µ–∂–∏—Å—Å—ë—Ä: </b>'+producer+'\n<b>–ò–Ω—Ñ–æ –Ω–∞ "–ö–∏–Ω–æ–ø–æ–∏—Å–∫–µ": </b>'+url+'\n<b>–¢—Ä–µ–π–ª–µ—Ä –Ω–∞ YouTube: </b>'+\
                     url_yt+'\n<b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ www.hdrezka.ru: </b>' + hdrezka + '\n'

        bot.send_photo(message.chat.id, img_url)
        bot.send_message(message.chat.id, film_text, parse_mode='HTML')
    except:
        bot.send_message(message.chat.id, '–°–æ—Ä–∏, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π —Ñ–∏–ª—å–º üòì', parse_mode='HTML')
    cnt = 0



def recommendFilm(message):
    global cnt
    cnt = 1
    key = types.ReplyKeyboardMarkup()
    key.row('–ò–∑ —Ç–æ–ø–∞', '–°–ª—É—á–∞–π–Ω—ã–π')
    key.row('–§–∏–ª—å—Ç—Ä—ã')
    key.row('–ö –Ω–∞—á–∞–ª—É')
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ 1 –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–ø—Ü–∏–π:', reply_markup=key)
    cnt = 0


def searchFilm(message):
    global cnt
    cnt = 1
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ —á–µ—Ä–µ–∑ <b>–¥–µ—Ñ–∏—Å</b>, –Ω–∞–ø—Ä–∏–º–µ—Ä:'
                                      ' <b>\n-–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä</b>', parse_mode='HTML')
    cnt = 0


if __name__ == '__main__':
    while True:
        try:
            bot.polling(none_stop=True)
        except:
            pass